#!/usr/bin/env ruby

# This script finds people that might be interested in a patch
# usage: git related <files | rev-list options>

$since = '5-years-ago'
$min_percent = 10
$files = []
$rev_args = []

$mailmaps = {}
$mailmaps_complex = {}

git_dir = %x[git rev-parse --git-dir].chomp
$base_dir = File.dirname(git_dir)
$cur_dir = Dir.pwd

KNOWN_ROLES = {
  'Signed-off' => :signer,
  'Reviewed' => :reviewer,
  'Acked' => :acker,
}

def get_mailmap(filename)
  return unless File.exists?(filename)
  File.open(filename) do |f|
    f.each do |line|
      case line.gsub(/\s*#.*$/, '')
      when /^([^<>]+)\s+<(\S+)>$/
        $mailmaps[$2] = [ $1, nil ]
      when /^<(\S+)>\s+<(\S+)>$/
        $mailmaps[$2] = [ nil, $1 ]
      when /^([^<>]+)\s+<(\S+)>\s+<(\S+)>$/
        $mailmaps[$3] = [ $1, $2 ]
      when /^([^<>]+)\s+<(\S+)>\s+([^<>]+)\s+<(\S+)>$/
        $mailmaps_complex[[$3, $4]] = [ $1, $2 ]
      end
    end
  end
end

get_aliases if $get_aliases
get_mailmap(File.join($base_dir, '.mailmap'))
mailmap_file = %x[git config mailmap.file].chomp
get_mailmap(mailmap_file)

class SimpleParser
  attr_writer :usage

  class Option
    attr_reader :short, :long, :values, :help

    def initialize(short, long, values, help, &block)
      @block = block
      @short = short
      @long = long
      @values = values
      @help = help
    end

    def call(v)
      @block.call(v)
    end
  end

  def initialize
    @list = {}
  end

  def on(*args, &block)
    short = args.shift if args.first.is_a?(String)
    long = args.shift if args.first.is_a?(String)
    values = args.shift if args.first.is_a?(Array)
    help = args.shift if args.first.is_a?(String)
    opt = Option.new(short, long, values, help, &block)
    @list[short] = opt if short
    @list[long] = opt if long
  end

  def parse
    i = 0
    if ARGV.member?('-h') or ARGV.member?('--help')
      usage
      exit 1
    end
    while cur = ARGV[i] do
      if cur =~ /^(-.+?)(?:=(.*))?$/
        opt = @list[$1]
        if opt
          v = $2
          if not v
            if not opt.values
              extra = true
            else
              extra = !!opt.values.map(&:to_s).member?(ARGV[i + 1])
            end
            v = extra ? ARGV.delete_at(i + 1) : true
          end
          opt.call(v)
          ARGV.delete_at(i)
          next
        end
      end
      i += 1
    end
  end

  def usage
    puts 'usage: %s' % @usage
    @list.values.uniq.each do |opt|
      s = '    '
      s << [opt.short, opt.long].compact.join(', ')
      s << '%*s%s' % [26 - s.size, '', opt.help] if opt.help
      puts s
    end
  end

end

opts = SimpleParser.new
opts.usage = 'usage: git related [options] <files | rev-list options>'

opts.on('-p', '--min-percent',
        'Minium percentage of role participation') do |v|
  $min_percent = v.to_i
end

opts.on('-d', '--since',
        'How far back to search for relevant commits') do |v|
  $since = v
end

opts.parse

class Person

  attr_reader :roles

  def initialize(name, email)
    @name = name
    @email = email
    @commits = {}
    @roles = Hash.new(0)
  end

  def add_role(commit, role)
    @commits[commit] = true
    @roles[role] += 1
  end

  def <=>(b)
    self.size <=> b.size
  end

  def size
    @commits.size
  end

  def to_s
    '%s <%s>' % [@name, @email]
  end

end

class Persons

  @@index = {}

  include Enumerable

  def each(&block)
    @@index.values.each(&block)
  end

  def self.get(name, email)

    # fix with mailmap
    person = [name, email]
    new = nil
    new = $mailmaps_complex[person] if not new and $mailmaps_complex.include?(person)
    new = $mailmaps[email] if not new and $mailmaps.include?(email)
    if new
      name = new[0] if new[0]
      email = new[1] if new[1]
    end

    id = email.downcase
    person = @@index[id]
    if not person
      person = @@index[id] = Person.new(name, email)
    end
    person
  end

end

class Commit

  def initialize(id)
    @id = id
  end

  def parse(data)
    msg = author = nil
    data.each_line do |line|
      if not msg
        case line
        when /^author ([^<>]+) <(\S+)> (.+)$/
          author = Persons.get($1, $2)
          author.add_role(@id, :author)
        when /^$/
          msg = true
        end
      else
        role_regex = KNOWN_ROLES.keys.join('|')
        if line =~ /^(#{role_regex})-by: ([^<>]+) <(\S+?)>$/
          person = Persons.get($2, $3)
          role = KNOWN_ROLES[$1]
          next if role == :signer and person == author
          person.add_role(@id, role)
        end
      end
    end
  end

end

class Commits

  def initialize
    @items = {}
    @main_commits = {}
  end

  def size
    @items.size
  end

  def each(&block)
    @items.each(&block)
  end

  def import
    return if @items.empty?
    File.popen(%w[git cat-file --batch], 'r+') do |p|
      p.write(@items.keys.join("\n"))
      p.close_write
      p.each do |line|
        if line =~ /^(\h{40}) commit (\d+)/
          id, len = $1, $2
          data = p.read($2.to_i)
          @items[id].parse(data)
        end
      end
    end
  end

  def get_blame(source, start, len, from)
    return if len == 0
    len ||= 1
    Dir.chdir($base_dir)
    File.popen(['git', 'blame', '--incremental', '-C', '-C',
               '-L', '%u,+%u' % [start, len],
               '--since', $since, from + '^',
               '--', source]) do |p|
      p.each do |line|
        if line =~ /^\h{40}/
          id = $&
          @items[id] = Commit.new(id) if not @main_commits.include?(id)
        end
      end
    end
    Dir.chdir($cur_dir)
  end

  def from_patches(files)
    source = nil
    files.each do |file|
      from = nil
      File.open(file) do |f|
        f.each do |line|
          case line
          when /^From (\h+) (.+)$/
            from = $1
            @main_commits[from] = true
          when /^---\s+(\S+)/
            source = $1 != '/dev/null' ? $1[2..-1] : nil
          when /^@@ -(\d+)(?:,(\d+))?/
            get_blame(source, $1, $2, from) if source and from
          end
        end
      end
    end
  end

  def from_rev_args(args)
    revs = []

    File.popen(%w[git rev-parse --revs-only --default HEAD --symbolic] + args).each do |rev|
      revs << rev.chomp
    end

    case revs.size
    when 1
      r = revs[0]
      r = '^' + r if r[0] != '-'
      args = [ r, 'HEAD' ]
    else
      args = revs
    end

    source = nil
    File.popen(%w[git rev-list --reverse] + args) do |p|
      p.each do |e|
        id = e.chomp
        @main_commits[id] = true
        File.popen(%w[git show -C --oneline] + [id]) do |p|
          p.each do |e|
            case e
            when /^---\s+(\S+)/
              source = $1 != '/dev/null' ? $1[2..-1] : nil
            when /^@@ -(\d+)(?:,(\d+))?/
              get_blame(source, $1, $2, id) if source
            end
          end
        end
      end
    end
  end

end

ARGV.each do |e|
  if File.exists?(e)
    $files << e
  else
    $rev_args << e
  end
end

commits = Commits.new
if $files.empty?
  commits.from_rev_args($rev_args)
else
  commits.from_patches($files)
end
commits.import

persons = Persons.new

persons.sort.reverse.each do |person|
  percent = person.size.to_f * 100 / commits.size
  next if percent < $min_percent

  roles = person.roles.map do |role, role_count|
    role_percent = role_count.to_f * 100 / commits.size
    '%s: %u%%' % [role, role_percent]
  end

  puts '%s (%s)' % [person, roles.join(', ')]
end
