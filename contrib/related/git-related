#!/usr/bin/env ruby

# This script finds people that might be interested in a patch
# usage: git related <file>

$since = '5-years-ago'
$min_percent = 10

def fmt_person(name, email)
  '%s <%s>' % [name, email]
end

class Commit

  attr_reader :persons

  def initialize(id)
    @id = id
    @persons = []
  end

  def parse(data)
    msg = nil
    data.each_line do |line|
      if not msg
        case line
        when /^author ([^<>]+) <(\S+)> (.+)$/
          @persons << fmt_person($1, $2)
        when /^$/
          msg = true
        end
      else
        if line =~ /^(Signed-off|Reviewed|Acked)-by: ([^<>]+) <(\S+?)>$/
          @persons << fmt_person($2, $3)
        end
      end
    end
    @persons.uniq!
  end

end

class Commits

  def initialize
    @items = {}
  end

  def size
    @items.size
  end

  def each(&block)
    @items.each(&block)
  end

  def import
    return if @items.empty?
    File.popen(%w[git cat-file --batch], 'r+') do |p|
      p.write(@items.keys.join("\n"))
      p.close_write
      p.each do |line|
        if line =~ /^(\h{40}) commit (\d+)/
          id, len = $1, $2
          data = p.read($2.to_i)
          @items[id].parse(data)
        end
      end
    end
  end

  def get_blame(source, start, len, from)
    return if len == 0
    len ||= 1
    File.popen(['git', 'blame', '--incremental', '-CCC',
               '-L', '%u,+%u' % [start, len],
               '--since', $since, from + '^',
               '--', source]) do |p|
      p.each do |line|
        if line =~ /^(\h{40})/
          id = $&
          @items[id] = Commit.new(id)
        end
      end
    end
  end

  def from_patch(file)
    from = source = nil
    File.open(file) do |f|
      f.each do |line|
        case line
        when /^From (\h+) (.+)$/
          from = $1
        when /^---\s+(\S+)/
          source = $1 != '/dev/null' ? $1[2..-1] : nil
        when /^@@ -(\d+)(?:,(\d+))?/
          get_blame(source, $1, $2, from)
        end
      end
    end
  end

end

exit 1 if ARGV.size != 1

commits = Commits.new
commits.from_patch(ARGV[0])
commits.import

count_per_person = Hash.new(0)

commits.each do |id, commit|
  commit.persons.each do |person|
    count_per_person[person] += 1
  end
end

count_per_person.each do |person, count|
  percent = count.to_f * 100 / commits.size
  next if percent < $min_percent
  puts person
end
